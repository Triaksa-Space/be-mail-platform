name: Deploy Go Echo App to EC2

on:
  push:
    branches:
      - main

env:
  GO_VERSION: '1.20'
  DEPLOY_PATH: /var/www/backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go environment
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Verify Go version
      run: go version

    - name: Tidy Go modules
      run: go mod tidy

    - name: Build server binary
      run: |
        mkdir -p build
        go build -o build/server cmd/main.go

    - name: Build sync binary
      run: |
        mkdir -p build
        go build -o build/sync cmd/main.go

    - name: Prepare deployment package
      run: |
        echo "Creating deployment package..."
        tar -czf deploy.tar.gz build

    - name: Upload deployment package to EC2
      uses: appleboy/scp-action@7af00892de6f8397c5c3393cfb3b32ae7f91b94b
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        source: "deploy.tar.gz"
        target: "${{ env.DEPLOY_PATH }}"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        envs: DEPLOY_PATH,EC2_USER
        script: |
          # Set variables
          DEPLOY_DIR=$DEPLOY_PATH
          DEPLOY_USER=$EC2_USER

          # Ensure the deployment directory exists
          mkdir -p $DEPLOY_DIR

          # Navigate to deployment directory
          cd $DEPLOY_DIR

          # Stop existing PM2 processes
          echo "Stopping existing PM2 processes..."
          pm2 stop go-echo-server || true
          pm2 stop go-echo-sync || true

          # Backup current deployment
          if [ -d "build" ]; then
            echo "Creating backup..."
            tar -czf backup-$(date +%Y%m%d_%H%M%S).tar.gz build
          fi

          # Clean current deployment
          echo "Cleaning current deployment..."
          rm -rf build

          # Extract new deployment
          echo "Extracting new deployment..."
          tar -xzf deploy.tar.gz

          # Set executable permissions
          chmod +x build/server
          chmod +x build/sync

          # Remove the deployment package
          rm -f deploy.tar.gz

          # Ensure Node.js and PM2 are installed
          if ! command -v pm2 &> /dev/null; then
            echo "Installing Node.js and PM2..."
            curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pm2
            # Setup PM2 to start on boot
            pm2 startup systemd -u $DEPLOY_USER --hp /home/$DEPLOY_USER
          fi

          # Start processes with PM2
          echo "Starting processes with PM2..."
          pm2 start build/server --name go-echo-server -- server
          pm2 start build/sync --name go-echo-sync -- sync

          # Save PM2 process list
          pm2 save

          echo "Deployment completed successfully"
